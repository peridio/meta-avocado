# Firmware configuration file for the Jetson Xavier NX DevKit

require-fwup-version="1.0.0"

define(LINUX_FILESYSTEM_DATA_TYPE, "0fc63daf-8483-4772-8e79-3d69d8477de4")
define(EFI_DATA_TYPE, "C12A7328-F81F-11D2-BA4B-00A0C93EC93B")
define(PERIDIO_DISK_UUID, "e3202db3-ec76-4942-aaae-7ac4623871fa")

define(UBOOT_ENV_OFFSET, "${PERIDIO_UBOOT_ENV_OFFSET}")
define(UBOOT_ENV_COUNT, "${PERIDIO_UBOOT_ENV_COUNT}")

define(KERNEL_PART_OFFSET, 2048)
define(KERNEL_PART_COUNT, 131072)
define(KERNEL_PART_UUID, "fcc205c8-2f1c-4dcd-bef4-7b209aa15cca")

define-eval(KERNEL_DTB_PART_OFFSET, "${KERNEL_PART_OFFSET} + ${KERNEL_PART_COUNT}")
define(KERNEL_DTB_PART_COUNT, 896)
define(KERNEL_DTB_PART_UUID, "5bdef3de-3e50-4ac1-a4f5-b820cd092654")

define-eval(CHAIN_A_PART_OFFSET, "${KERNEL_DTB_PART_OFFSET} + ${KERNEL_DTB_PART_COUNT}")
define(CHAIN_A_PART_COUNT, 66648)
define(CHAIN_A_PART_UUID, "5b108e13-992f-4617-86d1-fa57c1a05402")

define-eval(SECURE_OS_B_PART_OFFSET, "${CHAIN_A_PART_OFFSET} + ${CHAIN_A_PART_COUNT}")
define(SECURE_OS_B_PART_COUNT, 5120)
define(SECURE_OS_B_PART_UUID, "175e21c1-6cdd-40fc-84dd-44baeb78d634")

define-eval(EKS_B_PART_OFFSET, "${SECURE_OS_B_PART_OFFSET} + ${SECURE_OS_B_PART_COUNT}")
define(EKS_B_PART_COUNT, 128)
define(EKS_B_PART_UUID, "b9cc8b3e-2893-4f20-b3ef-768c3361ab21")

define-eval(ADSP_FW_B_PART_OFFSET, "${EKS_B_PART_OFFSET} + ${EKS_B_PART_COUNT}")
define(ADSP_FW_B_PART_COUNT, 2048)
define(ADSP_FW_B_PART_UUID, "a166053a-693d-4aa7-acf1-d6d7c941e6dc")

define-eval(RCE_FW_B_PART_OFFSET, "${ADSP_FW_B_PART_OFFSET} + ${ADSP_FW_B_PART_COUNT}")
define(RCE_FW_B_PART_COUNT, 2048)
define(RCE_FW_B_PART_UUID, "046954bf-03f4-48ab-89c2-7a2ead344f97")

define-eval(SCE_FW_B_PART_OFFSET, "${RCE_FW_B_PART_OFFSET} + ${RCE_FW_B_PART_COUNT}")
define(SCE_FW_B_PART_COUNT, 2048)
define(SCE_FW_B_PART_UUID, "7d3e441c-5f24-446c-9c83-5817c293ea12")

define-eval(BPMP_FW_B_PART_OFFSET, "${SCE_FW_B_PART_OFFSET} + ${SCE_FW_B_PART_COUNT}")
define(BPMP_FW_B_PART_COUNT, 3072)
define(BPMP_FW_B_PART_UUID, "71406e07-8a91-4b92-97ef-11468bb5f3fc")

define-eval(BPMP_FW_DTB_B_PART_OFFSET, "${BPMP_FW_B_PART_OFFSET} + ${BPMP_FW_B_PART_COUNT}")
define(BPMP_FW_DTB_B_PART_COUNT, 2048)
define(BPMP_FW_DTB_B_PART_UUID, "9b9b290e-b7f8-4fb0-9d22-15506fd92a93")

define-eval(KERNEL_B_PART_OFFSET, "${BPMP_FW_DTB_B_PART_OFFSET} + ${BPMP_FW_DTB_B_PART_COUNT}")
define(KERNEL_B_PART_COUNT, 131072)
define(KERNEL_B_PART_UUID, "a5d10080-cc75-479f-af17-9bbedaa5994f")

define-eval(KERNEL_DTB_B_PART_OFFSET, "${KERNEL_B_PART_OFFSET} + ${KERNEL_B_PART_COUNT}")
define(KERNEL_DTB_B_PART_COUNT, 896)
define(KERNEL_DTB_B_PART_UUID, "9b740b99-1841-4f88-a7fd-c4d18ccfe39f")

define-eval(CHAIN_B_PART_OFFSET, "${KERNEL_DTB_B_PART_OFFSET} + ${KERNEL_DTB_B_PART_COUNT}")
define(CHAIN_B_PART_COUNT, 66560)
define(CHAIN_B_PART_UUID, "6b1dee7c-a59b-4b0d-a54b-0a8577329179")

define-eval(RECOVERY_PART_OFFSET, "${CHAIN_B_PART_OFFSET} + ${CHAIN_B_PART_COUNT}")
define(RECOVERY_PART_COUNT, 163840)
define(RECOVERY_PART_UUID, "0bd43eb1-f252-4297-a3d0-9ea20e80a8a3")

define-eval(RECOVERY_DTB_PART_OFFSET, "${RECOVERY_PART_OFFSET} + ${RECOVERY_PART_COUNT}")
define(RECOVERY_DTB_PART_COUNT, 1024)
define(RECOVERY_DTB_PART_UUID, "288b6875-19bd-4158-8243-3e5b0509a21e")

define-eval(RECROOTFS_PART_OFFSET, "${RECOVERY_DTB_PART_OFFSET} + ${RECOVERY_DTB_PART_COUNT}")
define(RECROOTFS_PART_COUNT, 204800)
define(RECROOTFS_PART_UUID, "dd3718c8-7210-46bd-998b-be623a4007d7")

define-eval(ESP_PART_OFFSET, "${RECROOTFS_PART_OFFSET} + ${RECROOTFS_PART_COUNT}")
define(ESP_PART_COUNT, 131072)
define(ESP_PART_UUID, "0fcdce8f-8a93-4231-be14-4d79eeacc774")

define-eval(RECOVERY_ALT_PART_OFFSET, "${ESP_PART_OFFSET} + ${ESP_PART_COUNT}")
define(RECOVERY_ALT_PART_COUNT, 163840)
define(RECOVERY_ALT_PART_UUID, "9f75efff-f28f-4191-b8ef-1d3a77daa5d9")

define-eval(RECOVERY_DTB_ALT_PART_OFFSET, "${RECOVERY_ALT_PART_OFFSET} + ${RECOVERY_ALT_PART_COUNT}")
define(RECOVERY_DTB_ALT_PART_COUNT, 1024)
define(RECOVERY_DTB_ALT_PART_UUID, "2c3e8272-3d9b-4ba8-948e-43cf41894c50")

define-eval(ESP_ALT_PART_OFFSET, "${RECOVERY_DTB_ALT_PART_OFFSET} + ${RECOVERY_DTB_ALT_PART_COUNT}")
define(ESP_ALT_PART_COUNT, 131072)
define(ESP_ALT_PART_UUID, "2b31fd94-8871-43dc-a3dd-eab92d512b54")

define-eval(UDA_PART_OFFSET, "${ESP_ALT_PART_OFFSET} + ${ESP_ALT_PART_COUNT}")
define(UDA_PART_COUNT, 262144)
define(UDA_PART_UUID, "dd30391b-86c5-47cf-8053-64a38f390320")

define-eval(ROOTFS_A_PART_OFFSET, "${UDA_PART_OFFSET} + ${UDA_PART_COUNT}")
define(ROOTFS_PART_COUNT, 4194304)
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_PART_COUNT}")
define(ROOTFS_A_PART_UUID, "592ca19f-2cf3-427b-831a-c5fb1efecbe8")
define(ROOTFS_B_PART_UUID, "811e1244-3246-4d6f-ba80-c926200936fb")

define-eval(DATA_PART_OFFSET, "${ROOTFS_B_PART_OFFSET} + ${ROOTFS_PART_COUNT}")
define(DATA_PART_COUNT, 8388608)
define(DATA_PART_UUID, "5db81cc9-3b32-4916-b559-a98943bc2b8b")

# Firmware archive metadata
meta-product = ${PERIDIO_META_PRODUCT}
meta-description = ${PERIDIO_META_DESCRIPTION}
meta-version = ${PERIDIO_META_VERSION}
meta-platform = ${PERIDIO_META_PLATFORM}
meta-architecture = ${PERIDIO_META_ARCHITECTURE}
meta-author = ${PERIDIO_META_AUTHOR}
meta-vcs-identifier = ${PERIDIO_META_VCS_IDENTIFIER}
meta-misc = ${PERIDIO_META_MISC}

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource LNXFILE {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/Image-initramfs-${MACHINE}.cboot"
    assert-size-lte = ${KERNEL_PART_COUNT}
}
file-resource DTB_FILE {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/tegra194-p3668-all-p3509-0000.dtb"
    assert-size-lte = ${KERNEL_DTB_PART_COUNT}
}
file-resource TOSFILE {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/tos-${MACHINE}.img"
    assert-size-lte = ${SECURE_OS_B_PART_COUNT}
}
file-resource EKSFILE {
    host-path = "${TEGRAFLASH_HOST_PATH}/eks.img"
    assert-size-lte = ${EKS_B_PART_COUNT}
}
file-resource adsp-fw.bin {
    host-path = "${TEGRAFLASH_HOST_PATH}/adsp-fw.bin"
    assert-size-lte = ${ADSP_FW_B_PART_COUNT}
}
file-resource CAMERAFW {
    host-path = "${TEGRAFLASH_HOST_PATH}/camera-rtcpu-t194-rce.img"
    assert-size-lte = ${RCE_FW_B_PART_COUNT}
}
file-resource BPFFILE {
    host-path = "${TEGRAFLASH_HOST_PATH}/bpmp-2_t194.bin"
    assert-size-lte = ${BPMP_FW_B_PART_COUNT}
}
file-resource BPFDTB_FILE {
    host-path = "${TEGRAFLASH_HOST_PATH}/tegra194-a02-bpmp-p3668-a00_lz4.dtb"
    assert-size-lte = ${BPMP_FW_DTB_B_PART_COUNT}
}
file-resource ESP_FILE {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/tegra-espimage-${MACHINE}.esp"
    assert-size-lte = ${ESP_PART_COUNT}
}

file-resource rootfs.img {
    host-path = "${PERIDIO_HOST_ROOTFS_DIR}/${PERIDIO_ROOTFS_FILE}"
    assert-size-lte = ${ROOTFS_PART_COUNT}
}

gpt gpt {
    guid = "${PERIDIO_DISK_UUID}"

    partition 0 {
        name = "APP"
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${ROOTFS_A_PART_UUID}
    }
    partition 1 {
        name = "APP_b"
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${ROOTFS_B_PART_UUID}
    }
    partition 2 {
        name = "kernel"
        block-offset = ${KERNEL_PART_OFFSET}
        block-count = ${KERNEL_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${KERNEL_PART_UUID}
    }
    partition 3 {
        name = "kernel-dtb"
        block-offset = ${KERNEL_DTB_PART_OFFSET}
        block-count = ${KERNEL_DTB_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${KERNEL_DTB_PART_UUID}
    }
    partition 4 {
        name = "reserved_for_chain_A_user"
        block-offset = ${CHAIN_A_PART_OFFSET}
        block-count = ${CHAIN_A_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${CHAIN_A_PART_UUID}
    }
    partition 5 {
        name = "secure-os_b"
        block-offset = ${SECURE_OS_B_PART_OFFSET}
        block-count = ${SECURE_OS_B_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${SECURE_OS_B_PART_UUID}
    }
    partition 6 {
        name = "eks_b"
        block-offset = ${EKS_B_PART_OFFSET}
        block-count = ${EKS_B_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${EKS_B_PART_UUID}
    }
    partition 7 {
        name = "adsp-fw_b"
        block-offset = ${ADSP_FW_B_PART_OFFSET}
        block-count = ${ADSP_FW_B_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${ADSP_FW_B_PART_UUID}
    }
    partition 8 {
        name = "rce-fw_b"
        block-offset = ${RCE_FW_B_PART_OFFSET}
        block-count = ${RCE_FW_B_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${RCE_FW_B_PART_UUID}
    }
    partition 9 {
        name = "sce-fw_b"
        block-offset = ${SCE_FW_B_PART_OFFSET}
        block-count = ${SCE_FW_B_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${SCE_FW_B_PART_UUID}
    }
    partition 10 {
        name = "bpmp-fw_b"
        block-offset = ${BPMP_FW_B_PART_OFFSET}
        block-count = ${BPMP_FW_B_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${BPMP_FW_B_PART_UUID}
    }
    partition 11 {
        name = "bpmp-fw-dtb_b"
        block-offset = ${BPMP_FW_DTB_B_PART_OFFSET}
        block-count = ${BPMP_FW_DTB_B_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${BPMP_FW_DTB_B_PART_UUID}
    }
    partition 12 {
        name = "kernel_b"
        block-offset = ${KERNEL_B_PART_OFFSET}
        block-count = ${KERNEL_B_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${KERNEL_B_PART_UUID}
    }
    partition 13 {
        name = "kernel-dtb_b"
        block-offset = ${KERNEL_DTB_B_PART_OFFSET}
        block-count = ${KERNEL_DTB_B_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${KERNEL_DTB_B_PART_UUID}
    }
    partition 14 {
        name = "reserved_for_chain_B_user"
        block-offset = ${CHAIN_B_PART_OFFSET}
        block-count = ${CHAIN_B_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${CHAIN_B_PART_UUID}
    }
    partition 15 {
        name = "recovery"
        block-offset = ${RECOVERY_PART_OFFSET}
        block-count = ${RECOVERY_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${RECOVERY_PART_UUID}
    }
    partition 16 {
        name = "recovery-dtb"
        block-offset = ${RECOVERY_DTB_PART_OFFSET}
        block-count = ${RECOVERY_DTB_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${RECOVERY_DTB_PART_UUID}
    }
    partition 17 {
        name = "RECROOTFS"
        block-offset = ${RECROOTFS_PART_OFFSET}
        block-count = ${RECROOTFS_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${RECROOTFS_PART_UUID}
    }
    partition 18 {
        name = "esp"
        block-offset = ${ESP_PART_OFFSET}
        block-count = ${ESP_PART_COUNT}
        type = ${EFI_DATA_TYPE}
        guid = ${ESP_PART_UUID}
    }
    partition 19 {
        name = "recovery_alt"
        block-offset = ${RECOVERY_ALT_PART_OFFSET}
        block-count = ${RECOVERY_ALT_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${RECOVERY_ALT_PART_UUID}
    }
    partition 20 {
        name = "recovery-dtb_alt"
        block-offset = ${RECOVERY_DTB_ALT_PART_OFFSET}
        block-count = ${RECOVERY_DTB_ALT_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${RECOVERY_DTB_ALT_PART_UUID}
    }
    partition 21 {
        name = "esp_alt"
        block-offset = ${ESP_ALT_PART_OFFSET}
        block-count = ${ESP_ALT_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${ESP_ALT_PART_UUID}
    }
    partition 22 {
        name = "UDA"
        block-offset = ${UDA_PART_OFFSET}
        block-count = ${UDA_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${UDA_PART_UUID}
    }
    partition 23 {
        name = "APPDATA"
        block-offset = ${DATA_PART_OFFSET}
        block-count = ${DATA_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${DATA_PART_UUID}
    }
}

# Location where installed firmware information is stored.
# While this is called "u-boot", u-boot isn't involved in this
# setup. It just provides a convenient key/value store format.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}

# This firmware task writes everything to the destination media
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        gpt_write(gpt)

        uboot_clearenv(uboot-env)

        uboot_setenv(uboot-env, "peridio_private_key", "\${PERIDIO_PRIVATE_KEY}")
        uboot_setenv(uboot-env, "peridio_certificate", "\${PERIDIO_CERTIFICATE}")

        uboot_setenv(uboot-env, "peridio_active", "a")
        uboot_setenv(uboot-env, "peridio_validated", "1")
        uboot_setenv(uboot-env, "peridio_autovalidate", "1")
        uboot_setenv(uboot-env, "peridio_booted", "0")
        uboot_setenv(uboot-env, "peridio_initramfs_shell", "0")
        uboot_setenv(uboot-env, "peridio_disk_devpath", ${PERIDIO_DISK_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_devpath", ${PERIDIO_ROOTFS_A_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_type", ${PERIDIO_ROOTFS_A_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_devpath", ${PERIDIO_DATAFS_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_type", ${PERIDIO_DATAFS_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_mountpoint", ${PERIDIO_DATAFS_PART_MOUNTPOINT})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_META_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_META_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_META_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_META_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_META_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_META_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")
    }

    on-resource rootfs.img {
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-resource LNXFILE {
        raw_write(${KERNEL_PART_OFFSET})
    }

    on-resource DTB_FILE {
        raw_write(${KERNEL_DTB_PART_OFFSET})
    }

    on-resource TOSFILE {
        raw_write(${SECURE_OS_B_PART_OFFSET})
    }

    on-resource EKSFILE {
        raw_write(${EKS_B_PART_OFFSET})
    }

    on-resource adsp-fw.bin {
        raw_write(${ADSP_FW_B_PART_OFFSET})
    }

    on-resource CAMERAFW {
        raw_write(${RCE_FW_B_PART_OFFSET})
    }

    on-resource BPFFILE {
        raw_write(${BPMP_FW_B_PART_OFFSET})
    }

    on-resource BPFDTB_FILE {
        raw_write(${BPMP_FW_DTB_B_PART_OFFSET})
    }

    on-resource ESP_FILE {
        raw_write(${ESP_PART_OFFSET})
    }

    on-finish {
      # Invalidate the application data partition so that it is guaranteed to
      # trigger the corrupt filesystem detection code on first boot and get
      # formatted.
      raw_memset(${DATA_PART_OFFSET}, 256, 0xff)
    }
}
