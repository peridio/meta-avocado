# Firmware configuration file for qemuarm64-secureboot system

#
# Firmware metadata
#

require-fwup-version="1.4.0"  # For the GPT support

# All of these can be overriden using environment variables of the same name.
#
#  Run 'fwup -m' to query values in a .fw file.
#  Use 'fw_printenv' to query values on the target.
#
define(PERIDIO_FWUP_META_PRODUCT, "${PERIDIO_FWUP_META_PRODUCT}")
define(PERIDIO_FWUP_META_DESCRIPTION, "${PERIDIO_FWUP_META_DESCRIPTION}")
define(PERIDIO_FWUP_META_VERSION, "${PERIDIO_FWUP_META_VERSION}")
define(PERIDIO_FWUP_META_PLATFORM, "${PERIDIO_FWUP_META_PLATFORM}")
define(PERIDIO_FWUP_META_ARCHITECTURE, "${PERIDIO_FWUP_META_ARCHITECTURE}")
define(PERIDIO_FWUP_META_AUTHOR, "${PERIDIO_FWUP_META_AUTHOR}")

define(PERIDIO_AVOCADO_PROVISIONING, "${PACKAGE_DIR}/fwup_include/provisioning.conf")

# Default paths if not specified via the commandline
define(ROOTFS, "${PACKAGE_DIR}/avocado-image-base-qemuarm64-secureboot.squashfs")

# This configuration file will create an image that has the following
# partitions:
#
# +-------------------------------+
# | GPT                           |
# +-------------------------------+
# | Firmware configuration data   |
# | (formatted as uboot env)      |
# +-------------------------------+
# | p0*: Kernel/BOOT A (Readonly FAT32) |
# | /Image                      |
# | /avocado-initramfs            |
# +-------------------------------+
# | p0*: Kernel/BOOT B (Readonly FAT32) |
# +-------------------------------+
# | p1*: Rootfs A (squashfs)      |
# +-------------------------------+
# | p1*: Rootfs B (squashfs)      |
# +-------------------------------+
# | p2*: Platform A (squashfs)    |
# +-------------------------------+
# | p2*: Platform B (squashfs)    |
# +-------------------------------+
# | p3: Application (f2fs)        |
# +-------------------------------+

define(PERIDIO_DISK_DEVPATH, "/dev/vda")
define(PERIDIO_ROOTFS_PART0_DEVPATH, "/dev/vda2")
define(PERIDIO_ROOTFS_PART0_TYPE, "squashfs")
define(PERIDIO_DATAFS_PART0_DEVPATH, "/dev/vda4") # Linux part number is 1-based
define(PERIDIO_DATAFS_PART0_TYPE, "ext4")
define(PERIDIO_DATAFS_PART0_TARGET, "/data")
define(PERIDIO_AVOCADO_SIZE, "${PACKAGE_DIR}/fwup_include/platform-size.conf")
define(PERIDIO_AVOCADO_COMPLETE, "${PACKAGE_DIR}/fwup_include/platform-complete.conf")
define(PERIDIO_AVOCADO_UPGRADE_A, "${PACKAGE_DIR}/fwup_include/platform-upgrade-a.conf")
define(PERIDIO_AVOCADO_UPGRADE_B, "${PACKAGE_DIR}/fwup_include/platform-upgrade-b.conf")

define(UBOOT_ENV_OFFSET, 2048)
define(UBOOT_ENV_COUNT, 16)  # 8 KB

# The EFI partition contains the bootloader configuration
# 48 MB should be plenty for now.
define(BOOT_A_PART_OFFSET, 4096)
define(BOOT_A_PART_COUNT, 98304)
define-eval(BOOT_B_PART_OFFSET, "${BOOT_A_PART_OFFSET} + ${BOOT_A_PART_COUNT}")
define(BOOT_B_PART_COUNT, ${BOOT_A_PART_COUNT})

# Let the rootfs have room to grow up to 512 MiB
define-eval(ROOTFS_A_PART_OFFSET, "${BOOT_B_PART_OFFSET} + ${BOOT_B_PART_COUNT}")
define(ROOTFS_A_PART_COUNT, 1048576)
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})


# Application data partition (128 Mb). This can be enlarged
# to fill the entire volume.
define-eval(DATA_PART_OFFSET, "${ROOTFS_B_PART_OFFSET} + ${ROOTFS_B_PART_COUNT}")
define(DATA_PART_COUNT, 262144)

# Firmware archive metadata
meta-product = ${PERIDIO_FWUP_META_PRODUCT}
meta-description = ${PERIDIO_FWUP_META_DESCRIPTION}
meta-version = ${PERIDIO_FWUP_META_VERSION}
meta-platform = ${PERIDIO_FWUP_META_PLATFORM}
meta-architecture = ${PERIDIO_FWUP_META_ARCHITECTURE}
meta-author = ${PERIDIO_FWUP_META_AUTHOR}
meta-vcs-identifier = ${PERIDIO_FWUP_META_VCS_IDENTIFIER}
meta-misc = ${PERIDIO_FWUP_META_MISC}

mbr mbr-a {
    partition 0 {
        block-offset = ${BOOT_A_PART_OFFSET}
        block-count = ${BOOT_A_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 3 {
        block-offset = ${DATA_PART_OFFSET}
        block-count = ${DATA_PART_COUNT}
        type = 0x83 # Linux
        expand = true
    }
}

mbr mbr-b {
    partition 0 {
        block-offset = ${BOOT_B_PART_OFFSET}
        block-count = ${BOOT_B_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 3 {
        block-offset = ${DATA_PART_OFFSET}
        block-count = ${DATA_PART_COUNT}
        type = 0x83 # Linux
        expand = true
    }
}

# Location where installed firmware information is stored.
# While this is called "u-boot", u-boot isn't involved in this
# setup. It just provides a convenient key/value store format.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}

file-resource Image {
    host-path = "${PACKAGE_DIR}/Image"
}
file-resource avocado-initramfs {
    host-path = "${PACKAGE_DIR}/avocado-image-initramfs-qemuarm64-secureboot.cpio.gz"
}
file-resource extlinux.conf {
    host-path = "${PACKAGE_DIR}/extlinux.conf"
}
file-resource rootfs.img {
    host-path = ${ROOTFS}

    # Error out if the rootfs size exceeds the partition size
    assert-size-lte = ${ROOTFS_A_PART_COUNT}
}

# This firmware task writes everything to the destination media.
# This should only be run for the first installation.
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        mbr_write(mbr-a)

        uboot_clearenv(uboot-env)

        uboot_setenv(uboot-env, "peridio_serial_number", "\${PERIDIO_SERIAL_NUMBER}")
        uboot_setenv(uboot-env, "peridio_key", "\${PERIDIO_KEY}")
        uboot_setenv(uboot-env, "peridio_certificate", "\${PERIDIO_CERT}")

        uboot_setenv(uboot-env, "peridio_active", "a")
        uboot_setenv(uboot-env, "peridio_disk_devpath", ${PERIDIO_DISK_DEVPATH})
        uboot_setenv(uboot-env, "peridio_initramfs_shell", "false")
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_devpath", ${PERIDIO_ROOTFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_type", ${PERIDIO_ROOTFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_devpath", ${PERIDIO_PLATFORMFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_type", ${PERIDIO_PLATFORMFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_devpath", ${PERIDIO_DATAFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_type", ${PERIDIO_DATAFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_target", ${PERIDIO_DATAFS_PART0_TARGET})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_FWUP_META_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_FWUP_META_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_FWUP_META_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_FWUP_META_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_FWUP_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_FWUP_META_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_FWUP_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_FWUP_META_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")

        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")
        fat_mkdir(${BOOT_A_PART_OFFSET}, "/extlinux")
    }

    on-resource Image { fat_write(${BOOT_A_PART_OFFSET}, "/Image") }
    on-resource avocado-initramfs { fat_write(${BOOT_A_PART_OFFSET}, "/avocado-initramfs") }
    on-resource extlinux.conf { fat_write(${BOOT_A_PART_OFFSET}, "/extlinux/extlinux.conf") }
    on-resource rootfs.img { raw_write(${ROOTFS_A_PART_OFFSET}) }

    on-finish {
      # Clear out any old data in the B partition that might be mistaken for
      # a file system. This is mostly to avoid confusion in humans when
      # reprogramming SDCards with unknown contents.
      raw_memset(${ROOTFS_B_PART_OFFSET}, 256, 0xff)

      # Invalidate the application data partition so that it is guaranteed to
      # trigger the corrupt filesystem detection code on first boot and get
      # formatted.
      raw_memset(${DATA_PART_OFFSET}, 256, 0xff)
    }
}

task upgrade.a {
    # This task upgrades the A partition, so make sure we're running
    # on B.
    require-uboot-variable(uboot-env, "peridio_active", "b")

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "b.peridio_platform", "${PERIDIO_FWUP_META_PLATFORM}")
    require-uboot-variable(uboot-env, "b.peridio_architecture", "${PERIDIO_FWUP_META_ARCHITECTURE}")

    on-init {
        info("Upgrading partition A")

        # Clear some firmware information just in case this update gets
        # interrupted midway. If this partition was bootable, it's not going to
        # be soon.
        uboot_unsetenv(uboot-env, "a.peridio_version")
        uboot_unsetenv(uboot-env, "a.peridio_platform")
        uboot_unsetenv(uboot-env, "a.peridio_architecture")
        uboot_unsetenv(uboot-env, "a.peridio_uuid")

        # Indicate that the entire partition can be cleared
        trim(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        trim(${ROOTFS_A_PART_OFFSET}, ${ROOTFS_A_PART_COUNT})

        # Reset the previous contents of the A boot partition
        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")
        fat_mkdir(${BOOT_A_PART_OFFSET}, "/BOOT")
    }

    on-resource Image { fat_write(${BOOT_A_PART_OFFSET}, "/Image") }
    on-resource avocado-initramfs { fat_write(${BOOT_A_PART_OFFSET}, "/avocado-initramfs") }
    on-resource extlinux.conf { fat_write(${BOOT_A_PART_OFFSET}, "/BOOT/extlinux.conf") }
    on-resource rootfs.img { raw_write(${ROOTFS_A_PART_OFFSET}) }

    on-finish {
      # Update firmware metadata
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_devpath", ${PERIDIO_ROOTFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_type", ${PERIDIO_ROOTFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_devpath", ${PERIDIO_PLATFORMFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_type", ${PERIDIO_PLATFORMFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_devpath", ${PERIDIO_DATAFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_type", ${PERIDIO_DATAFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_target", ${PERIDIO_DATAFS_PART0_TARGET})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_FWUP_META_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_FWUP_META_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_FWUP_META_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_FWUP_META_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_FWUP_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_FWUP_META_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_FWUP_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_FWUP_META_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")

        # Reset the validation status and boot to A
        # next time.
        uboot_setenv(uboot-env, "peridio_active", "a")
        mbr_write(mbr-a)
    }
}

task upgrade.b {
    # This task upgrades the B partition, so make sure we're running
    # on A.
    require-uboot-variable(uboot-env, "peridio_active", "a")

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_FWUP_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_FWUP_META_ARCHITECTURE}")

    on-init {
      info("Upgrading partition B")

      # Clear some firmware information just in case this update gets
      # interrupted midway.
      uboot_unsetenv(uboot-env, "b.peridio_version")
      uboot_unsetenv(uboot-env, "b.peridio_platform")
      uboot_unsetenv(uboot-env, "b.peridio_architecture")
      uboot_unsetenv(uboot-env, "b.peridio_uuid")

      trim(${BOOT_B_PART_OFFSET}, ${BOOT_B_PART_COUNT})
      trim(${ROOTFS_B_PART_OFFSET}, ${ROOTFS_B_PART_COUNT})

      fat_mkfs(${BOOT_B_PART_OFFSET}, ${BOOT_B_PART_COUNT})
      fat_setlabel(${BOOT_B_PART_OFFSET}, "BOOT-B")
      fat_mkdir(${BOOT_A_PART_OFFSET}, "/BOOT")
    }

    on-resource Image { fat_write(${BOOT_B_PART_OFFSET}, "/Image") }
    on-resource avocado-initramfs { fat_write(${BOOT_B_PART_OFFSET}, "/avocado-initramfs") }
    on-resource extlinux.conf { fat_write(${BOOT_B_PART_OFFSET}, "/BOOT/extlinux.conf") }

    on-resource rootfs.img { raw_write(${ROOTFS_B_PART_OFFSET}) }

    on-finish {
      # Update firmware metadata
        uboot_setenv(uboot-env, "b.peridio_rootfs_part0_devpath", ${PERIDIO_ROOTFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_rootfs_part0_type", ${PERIDIO_ROOTFS_PART0_TYPE})
        uboot_setenv(uboot-env, "b.peridio_platformfs_part0_devpath", ${PERIDIO_PLATFORMFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_platformfs_part0_type", ${PERIDIO_PLATFORMFS_PART0_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part0_devpath", ${PERIDIO_DATAFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_datafs_part0_type", ${PERIDIO_DATAFS_PART0_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part0_target", ${PERIDIO_DATAFS_PART0_TARGET})
        uboot_setenv(uboot-env, "b.peridio_product", ${PERIDIO_FWUP_META_PRODUCT})
        uboot_setenv(uboot-env, "b.peridio_description", ${PERIDIO_FWUP_META_DESCRIPTION})
        uboot_setenv(uboot-env, "b.peridio_version", ${PERIDIO_FWUP_META_VERSION})
        uboot_setenv(uboot-env, "b.peridio_platform", ${PERIDIO_FWUP_META_PLATFORM})
        uboot_setenv(uboot-env, "b.peridio_architecture", ${PERIDIO_FWUP_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "b.peridio_author", ${PERIDIO_FWUP_META_AUTHOR})
        uboot_setenv(uboot-env, "b.peridio_vcs_identifier", ${PERIDIO_FWUP_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "b.peridio_misc", ${PERIDIO_FWUP_META_MISC})
        uboot_setenv(uboot-env, "b.peridio_uuid", "\${FWUP_META_UUID}")

        # Reset the validation status and boot to B next time.
        uboot_setenv(uboot-env, "peridio_active", "b")
        mbr_write(mbr-b)
    }
}

task upgrade.wrong {
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_FWUP_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_FWUP_META_ARCHITECTURE}")
    on-init {
        error("Please check the media being upgraded. It doesn't look like either the A or B partitions are active.")
    }
}

task upgrade.wrongplatform {
    on-init {
        error("Expecting platform=${PERIDIO_FWUP_META_PLATFORM} and architecture=${PERIDIO_FWUP_META_ARCHITECTURE}")
    }
}
