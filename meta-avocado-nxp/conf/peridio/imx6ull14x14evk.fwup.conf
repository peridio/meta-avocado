require-fwup-version="1.4.0"

define(UBOOT_OFFSET, 2)
define(UBOOT_COUNT, 1790)  # 895 KB (up to hardcoded U-Boot environment offset

define(UBOOT_ENV_OFFSET, "${PERIDIO_UBOOT_ENV_OFFSET}")
define(UBOOT_ENV_COUNT, "${PERIDIO_UBOOT_ENV_COUNT}")
define-eval(UBOOT_ENV_REDUND_OFFSET, "${PERIDIO_UBOOT_ENV_OFFSET} + ${UBOOT_ENV_COUNT} * 2")

# Boot
define(BOOT_A_PART_OFFSET, "${PERIDIO_BOOTFS_OFFSET_BLOCKS}")
define-eval(BOOT_A_PART_COUNT, "${PERIDIO_BOOTFS_SIZE_MB} * 1024 * 1024 / ${PERIDIO_DISK_BLOCK_SIZE}")
define-eval(BOOT_B_PART_OFFSET, "${BOOT_A_PART_OFFSET} + ${BOOT_A_PART_COUNT}")
define(BOOT_B_PART_COUNT, ${BOOT_A_PART_COUNT})

# RootFS
define-eval(ROOTFS_A_PART_OFFSET, "${BOOT_B_PART_OFFSET} + ${BOOT_B_PART_COUNT}")
define-eval(ROOTFS_A_PART_COUNT, "${PERIDIO_ROOTFS_SIZE_MB} * 1024 * 1024 / ${PERIDIO_DISK_BLOCK_SIZE}")
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})

# Data
define-eval(DATA_PART_OFFSET, "${ROOTFS_B_PART_OFFSET} + ${ROOTFS_B_PART_COUNT}")
define-eval(DATA_PART_COUNT, "${PERIDIO_DATAFS_SIZE_MB} * 1024 * 1024 / ${PERIDIO_DISK_BLOCK_SIZE}")

define(PERIDIO_DISK_UUID, "2fbebe4d-0b70-4121-a2a3-5d2cc58d46e2")
define(PERIDIO_DISK_UBOOT_ENV_UUID, "ba5cc62e-6f1f-4321-9ee4-907e9f8b6a94")
define(PERIDIO_DISK_BOOT_A_UUID, "ef8cbeb1-eac7-4f6e-87d9-d4c106cd50ea")
define(PERIDIO_DISK_BOOT_B_UUID, "90940628-add3-4b05-a0cd-5e900c9472ad")
define(PERIDIO_DISK_ROOTFS_A_UUID, "894cdc22-d192-47f5-961b-f5d7f6196803")
define(PERIDIO_DISK_ROOTFS_B_UUID, "83539304-93ab-4092-ad71-db21d3ac7253")
define(PERIDIO_DISK_DATA_UUID, "62fc6879-3d47-4895-9b53-105cc57fe3ac")
define(GPT_DISK_LINUX_DATA_TYPE, "0fc63daf-8483-4772-8e79-3d69d8477de4")

# Firmware archive metadata
meta-product = ${PERIDIO_META_PRODUCT}
meta-description = ${PERIDIO_META_DESCRIPTION}
meta-version = ${PERIDIO_META_VERSION}
meta-platform = ${PERIDIO_META_PLATFORM}
meta-architecture = ${PERIDIO_META_ARCHITECTURE}
meta-author = ${PERIDIO_META_AUTHOR}
meta-vcs-identifier = ${PERIDIO_META_VCS_IDENTIFIER}
meta-misc = ${PERIDIO_META_MISC}

gpt gpt {
    guid = ${PERIDIO_DISK_UUID}

    partition 0 {
        block-offset = ${UBOOT_ENV_OFFSET}
        block-count = ${UBOOT_ENV_COUNT}
        type = ${GPT_DISK_LINUX_DATA_TYPE}
        guid = ${PERIDIO_DISK_UBOOT_ENV_UUID}
        name = "ubootenv"
    }

    partition 1 {
        block-offset = ${BOOT_A_PART_OFFSET}
        block-count = ${BOOT_A_PART_COUNT}
        type = ${GPT_DISK_LINUX_DATA_TYPE}
        guid = ${PERIDIO_DISK_BOOT_A_UUID}
        name = "boot-a"
    }
    partition 2 {
        block-offset = ${BOOT_B_PART_OFFSET}
        block-count = ${BOOT_B_PART_COUNT}
        type = ${GPT_DISK_LINUX_DATA_TYPE}
        guid = ${PERIDIO_DISK_BOOT_B_UUID}
        name = "boot-b"
    }
    partition 3 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = ${GPT_DISK_LINUX_DATA_TYPE}
        guid = ${PERIDIO_DISK_ROOTFS_A_UUID}
        name = "rootfs-a"
    }
    partition 4 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = ${GPT_DISK_LINUX_DATA_TYPE}
        guid = ${PERIDIO_DISK_ROOTFS_B_UUID}
        name = "rootfs-b"
    }
    partition 5 {
        block-offset = ${DATA_PART_OFFSET}
        block-count = ${DATA_PART_COUNT}
        type = ${GPT_DISK_LINUX_DATA_TYPE}
        guid = ${PERIDIO_DISK_DATA_UUID}
        name = "data"
    }
}

# Location where installed firmware information is stored.
# While this is called "u-boot", u-boot isn't involved in this
# setup. It just provides a convenient key/value store format.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
    block-offset-redund = ${UBOOT_ENV_REDUND_OFFSET}
}

file-resource u-boot-dtb.imx {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/u-boot.imx-sd-optee"
}
file-resource uTee-6ullevk {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/uTee-6ullevk"
}
file-resource uboot-env.bin {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/u-boot-imx-initial-env-sd-optee"
}
file-resource zImage {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/zImage"
}
file-resource imx6ull-14x14-evk.dtb {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/imx6ull-14x14-evk.dtb"
}
file-resource avocado-initramfs {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/avocado-image-initramfs-${MACHINE}.cpio.gz"
}
file-resource rootfs.img {
    host-path = "${PERIDIO_HOST_ROOTFS_DIR}/${PERIDIO_ROOTFS_FILE}"

    # Error out if the rootfs size exceeds the partition size
    assert-size-lte = ${ROOTFS_A_PART_COUNT}
}

# This firmware task writes everything to the destination media.
# This should only be run at the factory to initialize a board!
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        gpt_write(gpt)

        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")

        uboot_clearenv(uboot-env)

        uboot_setenv(uboot-env, "peridio_private_key", "\${PERIDIO_PRIVATE_KEY}")
        uboot_setenv(uboot-env, "peridio_certificate", "\${PERIDIO_CERTIFICATE}")

        uboot_setenv(uboot-env, "peridio_active", "a")
        uboot_setenv(uboot-env, "peridio_disk_devpath", ${PERIDIO_DISK_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_devpath", ${PERIDIO_ROOTFS_A_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_type", ${PERIDIO_ROOTFS_A_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_devpath", ${PERIDIO_DATAFS_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_type", ${PERIDIO_DATAFS_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_mountpoint", ${PERIDIO_DATAFS_PART_MOUNTPOINT})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_META_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_META_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_META_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_META_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_META_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_META_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")
    }

    on-resource u-boot-dtb.imx { raw_write(${UBOOT_OFFSET}) }
    on-resource zImage { fat_write(${BOOT_A_PART_OFFSET}, "zImage") }
    on-resource uTee-6ullevk { fat_write(${BOOT_A_PART_OFFSET}, "uTee-6ullevk") }
    on-resource avocado-initramfs { fat_write(${BOOT_A_PART_OFFSET}, "avocado-initramfs") }
    on-resource imx6ull-14x14-evk.dtb { fat_write(${BOOT_A_PART_OFFSET}, "imx6ull-14x14-evk.dtb") }

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Clear out any old data in the B partition that might be mistaken for
        # a file system. This is mostly to avoid confusion in humans when
        # reprogramming SDCards with unknown contents.
        raw_memset(${BOOT_B_PART_OFFSET}, 256, 0xff)
        raw_memset(${ROOTFS_B_PART_OFFSET}, 256, 0xff)

        # Invalidate the application data partition so that it is guaranteed to
        # trigger the corrupt filesystem detection code on first boot and get
        # formatted. If this isn't done and an old SDCard is reused, the
        # application data could be in a weird state.
        raw_memset(${DATA_PART_OFFSET}, 256, 0xff)
    }
}

task upgrade.a {
    # This task upgrades the A partition
    require-partition-offset(1, ${ROOTFS_B_PART_OFFSET})

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "b.peridio_platform", "${PERIDIO_META_PLATFORM}")
    require-uboot-variable(uboot-env, "b.peridio_architecture", "${PERIDIO_META_ARCHITECTURE}")

    on-init {
        info("Upgrading partition A")

        # Clear some firmware information just in case this update gets
        # interrupted midway. If this partition was bootable, it's not going to
        # be soon.
        uboot_unsetenv(uboot-env, "a.peridio_version")
        uboot_unsetenv(uboot-env, "a.peridio_platform")
        uboot_unsetenv(uboot-env, "a.peridio_architecture")
        uboot_unsetenv(uboot-env, "a.peridio_uuid")

        # Reset the previous contents of the A boot partition
        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")

        # Indicate that the entire partition can be cleared
        trim(${ROOTFS_A_PART_OFFSET}, ${ROOTFS_A_PART_COUNT})
    }

    # Write the new firmware and Linux images, but don't
    # commit them. That way if the user aborts midway, we
    # still are using the original firmware.
    on-resource zImage { fat_write(${BOOT_A_PART_OFFSET}, "zImage") }
    on-resource uTee-6ullevk { fat_write(${BOOT_A_PART_OFFSET}, "uTee-6ullevk") }
    on-resource avocado-initramfs { fat_write(${BOOT_A_PART_OFFSET}, "avocado-initramfs") }
    on-resource imx6ull-14x14-evk.dtb { fat_write(${BOOT_A_PART_OFFSET}, "imx6ull-14x14-evk.dtb") }
    on-resource rootfs.img {
        delta-source-raw-offset=${ROOTFS_B_PART_OFFSET}
        delta-source-raw-count=${ROOTFS_B_PART_COUNT}
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_devpath", ${PERIDIO_ROOTFS_A_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_type", ${PERIDIO_ROOTFS_A_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_devpath", ${PERIDIO_DATAFS_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_type", ${PERIDIO_DATAFS_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_mountpoint", ${PERIDIO_DATAFS_PART_MOUNTPOINT})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_META_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_META_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_META_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_META_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_META_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_META_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")

        # Switch over to boot the new firmware
        uboot_setenv(uboot-env, "peridio_active", "a")
    }

    on-error {
    }
}

task upgrade.b {
    # This task upgrades the B partition
    require-partition-offset(1, ${ROOTFS_A_PART_OFFSET})

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_META_ARCHITECTURE}")

    on-init {
        info("Upgrading partition B")

        # Clear some firmware information just in case this update gets
        # interrupted midway.
        uboot_unsetenv(uboot-env, "b.peridio_version")
        uboot_unsetenv(uboot-env, "b.peridio_platform")
        uboot_unsetenv(uboot-env, "b.peridio_architecture")
        uboot_unsetenv(uboot-env, "b.peridio_uuid")

        # Reset the previous contents of the B boot partition
        fat_mkfs(${BOOT_B_PART_OFFSET}, ${BOOT_B_PART_COUNT})
        fat_setlabel(${BOOT_B_PART_OFFSET}, "BOOT-B")

        trim(${ROOTFS_B_PART_OFFSET}, ${ROOTFS_B_PART_COUNT})
    }

    on-resource zImage { fat_write(${BOOT_B_PART_OFFSET}, "zImage") }
    on-resource uTee-6ullevk { fat_write(${BOOT_B_PART_OFFSET}, "uTee-6ullevk") }
    on-resource avocado-initramfs { fat_write(${BOOT_B_PART_OFFSET}, "avocado-initramfs") }
    on-resource imx6ull-14x14-evk.dtb { fat_write(${BOOT_B_PART_OFFSET}, "imx6ull-14x14-evk.dtb") }
    on-resource rootfs.img {
        delta-source-raw-offset=${ROOTFS_A_PART_OFFSET}
        delta-source-raw-count=${ROOTFS_A_PART_COUNT}
        raw_write(${ROOTFS_B_PART_OFFSET})
    }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "b.peridio_rootfs_part_devpath", ${PERIDIO_ROOTFS_B_PART_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_rootfs_part_type", ${PERIDIO_ROOTFS_B_PART_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part_devpath", ${PERIDIO_DATAFS_PART_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_datafs_part_type", ${PERIDIO_DATAFS_PART_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part_mountpoint", ${PERIDIO_DATAFS_PART_MOUNTPOINT})
        uboot_setenv(uboot-env, "b.peridio_product", ${PERIDIO_META_PRODUCT})
        uboot_setenv(uboot-env, "b.peridio_description", ${PERIDIO_META_DESCRIPTION})
        uboot_setenv(uboot-env, "b.peridio_version", ${PERIDIO_META_VERSION})
        uboot_setenv(uboot-env, "b.peridio_platform", ${PERIDIO_META_PLATFORM})
        uboot_setenv(uboot-env, "b.peridio_architecture", ${PERIDIO_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "b.peridio_author", ${PERIDIO_META_AUTHOR})
        uboot_setenv(uboot-env, "b.peridio_vcs_identifier", ${PERIDIO_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "b.peridio_misc", ${PERIDIO_META_MISC})
        uboot_setenv(uboot-env, "b.peridio_uuid", "\${FWUP_META_UUID}")

        # Switch over to boot the new firmware
        uboot_setenv(uboot-env, "peridio_active", "b")
    }

    on-error {
    }
}

task upgrade.unexpected {
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_META_ARCHITECTURE}")
    on-init {
        error("Please check the media being upgraded. It doesn't look like either the A or B partitions are active.")
    }
}

task upgrade.wrongplatform {
    on-init {
        error("Expecting platform=${PERIDIO_META_PLATFORM} and architecture=${PERIDIO_META_ARCHITECTURE}")
    }
}

task provision {
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_META_ARCHITECTURE}")
    on-init {
    }
}
task provision.wrongplatform {
    on-init {
        error("Expecting platform=${PERIDIO_META_PLATFORM} and architecture=${PERIDIO_META_ARCHITECTURE}")
    }
}
